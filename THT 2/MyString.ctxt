#BlueJ class context
comment0.params=str
comment0.target=MyString(java.lang.String)
comment0.text=\r\n\ Constructor\ that\ takes\ in\ a\ String\ object\ and\ sets\ the\ fields\ of\ MyString\ to\ the\ appropriate\ values\r\n\ @param\ String\ str\ -\ the\ string\ to\ be\ put\ in\ the\ MyString\ object\r\n\ @return\ MyString\ object\ -\ instance\ of\ MyString\r\n
comment1.params=inSequence
comment1.target=MyString(char[])
comment1.text=\r\n\ Constructor\ that\ takes\ in\ a\ character\ array\ and\ sets\ the\ fields\ of\ MyString\ to\ the\ appropriate\ values\r\n\ @param\ char\ []\ inSequence\ -\ the\ array\ of\ characters\ to\ be\ put\ in\ the\ MyString\ object\r\n\ @return\ MyString\ object\ -\ instance\ of\ MyString\r\n
comment10.params=findMe
comment10.target=int\ indexOf(char)
comment10.text=\r\n\ indexOf\ -\ returns\ the\ index\ of\ the\ character\ given\ by\ user\r\n\ @param\ char\ findMe\ -\ the\ character\ to\ be\ found\ in\ the\ MyString\r\n\ @return\ int\ -\ the\ index\ position\ of\ the\ character\r\n
comment11.params=findMe\ fromIndex
comment11.target=int\ indexOf(char,\ int)
comment11.text=\r\n\ indexOf\ -\ overloaded\ -\ returns\ the\ index\ of\ the\ character\ given\ by\ the\ user\ starting\ after\ the\ index\ given\ by\ the\ user\r\n\ @param\ char\ findMe\ -\ the\ character\ to\ be\ found\ in\ the\ MyString\r\n\ @param\ int\ fromIndex\ -\ the\ index\ to\ start\ searching\ from\ \r\n\ @return\ int\ -\ the\ indexed\ position\ of\ the\ character\r\n
comment12.params=findMe
comment12.target=int\ lastIndexOf(char)
comment12.text=\r\n\ lastIndexOf\ -\ finds\ the\ final\ index\ of\ a\ character\ given\ by\ the\ user\r\n\ @param\ char\ findMe\ -\ the\ character\ to\ be\ found\ in\ the\ MyString\r\n\ @return\ int\ -\ the\ indexed\ position\ of\ the\ character\r\n
comment13.params=
comment13.target=int\ length()
comment13.text=\r\n\ length\ -\ returns\ the\ length\ of\ the\ MyString\ phrase\ \r\n\ @return\ int\ -\ the\ length\ of\ the\ MyString\ phrase\r\n
comment14.params=oldChar\ newChar
comment14.target=MyString\ replace(char,\ char)
comment14.text=\r\n\ replace\ -\ replaces\ a\ certain\ character\ in\ the\ MyString\ with\ another\r\n\ @param\ char\ oldChar\ -\ the\ character\ that\ will\ be\ replaced\ with\ newChar\r\n\ @param\ char\ newChar\ -\ the\ character\ replacing\ oldChar\r\n\ @return\ MyString\ -\ the\ new\ string\ with\ the\ characters\ changed\r\n
comment15.params=prefix
comment15.target=boolean\ startsWithString(MyString)
comment15.text=\r\n\ startsWithString\ -\ checks\ if\ the\ MyString\ begins\ with\ the\ user\ provided\ prefix\r\n\ @param\ MyString\ prefix\ -\ the\ prefix\ to\ be\ checked\ for\ at\ the\ beginning\r\n\ @return\ boolean\ -\ whether\ or\ not\ the\ MyString\ starts\ with\ the\ prefix\r\n
comment16.params=beginIndex
comment16.target=MyString\ substring(int)
comment16.text=\r\n\ substring\ -\ returns\ a\ new\ MyString\ in\ the\ range\ from\ the\ user\ given\ starting\ index\ to\ the\ end\ of\ the\ MyString\r\n\ @param\ int\ beginIndex\ -\ the\ start\ of\ the\ new\ substring\r\n\ @return\ MyString\ -\ the\ new\ instance\ that\ is\ the\ shorter\ substring\r\n
comment17.params=beginIndex\ endIndex
comment17.target=MyString\ substring(int,\ int)
comment17.text=\r\n\ substring\ -\ overloaded\ -\ returns\ a\ new\ MyString\ in\ the\ random\ from\ the\ user\ given\ starting\ index\ to\ the\ user\ given\ ending\ index\r\n\ @param\ int\ beginIndex\ -\ the\ starting\ index\ of\ the\ substring\r\n\ @param\ int\ endIndex\ -\ the\ ending\ index\ of\ the\ substring\r\n\ @return\ \r\n
comment18.params=
comment18.target=MyString\ toUpperCase()
comment18.text=\r\n\ toUpperCase\ -\ converts\ all\ of\ the\ characters\ in\ the\ MyString\ to\ uppercase\ letters\r\n\ @return\ MyString\ -\ a\ new\ instance\ of\ a\ completely\ uppercase\ MyString\r\n
comment19.params=
comment19.target=MyString\ toLowerCase()
comment19.text=\r\n\ toLowerCase\ -\ converts\ all\ of\ the\ characters\ in\ the\ MyString\ to\ lowercase\ letters\r\n\ @return\ MyString\ -\ a\ new\ instance\ of\ a\ completely\ lowercase\ MyString\r\n
comment2.params=other
comment2.target=MyString(MyString)
comment2.text=\r\n\ Constructor\ that\ takes\ in\ a\ MyString\ object\ and\ sets\ the\ fields\ of\ MyString\ to\ the\ appropriate\ values\r\n\ @param\ MyString\ other\ -\ the\ MyString\ object\ to\ be\ cloned\ to\ be\ put\ in\ the\ MyString\ object\r\n\ @return\ MyString\ object\ -\ instance\ of\ MyString\r\n
comment20.params=
comment20.target=java.lang.String\ toString()
comment20.text=\r\n\ toString\ -\ returns\ a\ String\ object\ to\ be\ printed\r\n\ @return\ String\ -\ the\ new\ String\ object\ to\ be\ printed\r\n
comment3.params=index
comment3.target=char\ charAt(int)
comment3.text=\r\n\ charAt\ method\ -\ returns\ the\ character\ at\ the\ specified\ position\r\n\ @param\ int\ index\ -\ the\ position\ of\ the\ wanted\ character\r\n\ @return\ char\ -\ character\ at\ position\ (index)\r\n
comment4.params=other
comment4.target=int\ compareTo(MyString)
comment4.text=\r\n\ compareTo\ method\ -\ lexographically\ compares\ the\ two\ MyString\ character\ values\ and\ returns\ which\ string\ is\ considered\ greater,\ if\ the\ first\ string\ is\ greater,\ return\ 1,\ if\ the\ second\ string\ is\ greater,\ return\ -1,\ if\ they're\ equal,\ return\ 0\r\n\ @param\ MyString\ other\ -\ an\ instance\ of\ the\ my\ string\ object\ that\ will\ be\ compared\ to\ the\ first\ object\r\n\ @return\ int\ -\ the\ value\ of\ comparison\ \r\n
comment5.params=other
comment5.target=int\ compareToIgnoreCase(MyString)
comment5.text=\r\n\ compareToIgnoreCase\ -\ compares\ the\ two\ MyStrings\ lexographically\ by\ first\ making\ both\ of\ them\ lower\ case,\ then\ \r\n\ @param\ MyString\ other\ -\ an\ instance\ of\ the\ MyString\ object\ that\ will\ be\ compared\ to\ the\ first\ object\r\n\ @return\ int\ -\ the\ value\ of\ comparison\r\n
comment6.params=other
comment6.target=MyString\ concat(MyString)
comment6.text=\r\n\ concat\ -\ concatenates\ the\ two\ strings,\ appending\ the\ second\ string\ onto\ the\ end\ of\ the\ first\r\n\ @param\ MyString\ other\ -\ an\ instance\ of\ the\ MyString\ object\ that\ is\ concatenated\ onto\ the\ end\r\n\ @return\ MyString\ -\ the\ new\ MyString\ object\ of\ both\ put\ together\r\n
comment7.params=suffix
comment7.target=boolean\ endsWith(MyString)
comment7.text=\r\n\ endsWith\ -\ checks\ if\ the\ MyString\ ends\ with\ the\ suffix\r\n\ @param\ MyString\ suffix\ -\ the\ phrased\ that's\ being\ checked\ against\ the\ end\ of\ the\ first\ MyString\r\n\ @return\ boolean\ -\ whether\ or\ not\ the\ phrase\ ends\ with\ the\ suffix\r\n
comment8.params=other
comment8.target=boolean\ equals(MyString)
comment8.text=\r\n\ equals\ -\ checks\ whether\ the\ two\ MyStrings\ are\ equivalent\ or\ not\r\n\ @param\ MyString\ other\ -\ the\ instance\ of\ a\ MyString\ object\ that\ is\ being\ checked\ for\ equivalence\r\n\ @return\ boolean\ -\ whether\ or\ not\ the\ phrases\ are\ the\ same\r\n
comment9.params=other
comment9.target=boolean\ equalsIgnoreCase(MyString)
comment9.text=\r\n\ equalsIgnoreCase\ -\ checks\ whether\ the\ two\ MyStrings\ are\ equivalent\ not\ accounting\ for\ case\ -\ sends\ to\ .toLowerCase\ then\ to\ equals\r\n\ @param\ MyString\ other\ -\ the\ instance\ of\ a\ MyString\ object\ that\ is\ being\ checked\ for\ equivalence\r\n\ @return\ boolean\ -\ whether\ or\ not\ the\ phrases\ are\ the\ same\r\n
numComments=21
